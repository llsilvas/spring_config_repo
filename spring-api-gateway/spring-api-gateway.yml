spring:
  application:
    name: spring-api-gateway

  # Ativa importação via Config Server remoto
  config:
    import: optional:configserver:http://${SPRING_CONFIG_SERVER:localhost}:8888

  # Define o perfil ativo por variável de ambiente
  profiles:
    active: ${SPRING_PROFILES_ACTIVE:dev}

  cloud:
    config:
      enabled: true

    # === GATEWAY (Rotas definidas nos perfis) ===
    gateway:
      default-filters: [] # Global filters se necessário

  # === JWT / OAUTH2 ===
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: ${KEYCLOAK_ISSUER_URI:http://localhost:8443/realms/event-management}

  # === KEYCLOAK ADMIN ===
  keycloak:
    admin:
      client-id: ${KEYCLOAK_CLIENT_ID:user-service-admin}
      client-secret: ${KEYCLOAK_CLIENT_SECRET:default-secret}
      auth-server-url: ${KEYCLOAK_AUTH_URL:http://localhost:8443}
      realm: ${KEYCLOAK_REALM:event-management}

  # === RABBITMQ ===
  rabbitmq:
    host: ${SPRING_RABBITMQ_HOST:localhost}
    port: 5672
    connection-timeout: 5s

# === CONFIGURAÇÕES DO SERVIDOR ===
server:
  port: 9999

# === EXPORTAÇÃO PARA LOKI ===
loki:
  url: ${LOKI_URL:http://localhost:3100}/loki/api/v1/push
  jobName: ${LOKI_JOB_NAME:spring-event-service}

# === ACTUATOR / TRACING ===
management:
  endpoints:
    web:
      exposure:
        include: health, metrics, prometheus, info, refresh, circuitbreakers
  tracing:
    sampling:
      probability: 1.0

# === LOGGING + CORRELAÇÃO ===
logging:
  pattern:
    correlation: '%X{traceId:-} %X{spanId:-}'
    level: '%-5level [${spring.application.name}]'
  include-application-name: true
  level:
    root: INFO
    org.springframework.web: INFO
    org.springframework.boot: INFO
    org.springframework.security: WARN
    org.springframework.cloud: WARN
    io.opentelemetry: WARN
    io.micrometer: WARN

# === OTEL (pode ser sobrescrito por perfil) ===
otel:
  logs:
    exporter: none
  metrics:
    exporter: none
